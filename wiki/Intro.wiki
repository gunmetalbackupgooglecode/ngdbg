#summary Принцип работы отладчика
#labels Featured,Phase-Design

= Режимы работы =
Отладчик может быть загруженным при старте системы (для этого создает сервис с драйвером ngboot.sys, загружаемым при старте и вызывающим особые каллбеки инициализации из ngdbg.sys) или же может быть загружен в любой момент (драйвер ngdbg.sys).

Во время работы отладчик может работать в текстовом и (в будущем планируется поддержка) в графическом-оконном режиме.

Отладчик всплывает по комбинации Ctrl-Alt-Shift-F12, а так же при возникновении исключения, для которого установлена соответствующая опция (команда wakeon exception-status).
Статусы STATUS_SINGLE_STEP и STATUS_BREAKPOINT отлавливаются автоматически

= Взаимодействие с системой =
Отладчик устанавливает ряд каллбеков и хуков на различные события в системе, образуя некоторую прослойку между аппаратной частью по обработке событий (KiTrapXX, Halp****) и ядром (в отличие от SoftICE, который перехватывает напрямую прерывания).

Для передачи данных между различными запусками (драйвер выгружаемый и может быть загружен/выгружен несколько раз) создается структура разделяемых данных (SHARED_DISP_DATA), указатель на которую сохраняется в одном из неиспользуемых полей MZ-заголовка загруженного в пространство сесиии win32k.sys.

Непосредственно отладочный движок (dbgeng.cpp) перехватывает таблицу импорта IAT загруженного hal.dll, а именно импорт KiDispatchInterrupt из ядра и перенаправляет на свою DbgDispatchInterrupt. Во время работы отладчика она игнорирует все запросы на обработку прерываний и текущий поток не вытесняется даже на низком IRQL, позволяя отладчику работать с подкачиваемыми данными.

Также отладочный движок перехватывает в ядре указатель KiDebugRoutine, который содержит адрес одной из двух функций ядра - KdpTrap или KdpStub. Функция по этому указателю вызывается при возникновении каждого исключения и это является удобным местом для установки своей реакции на исключения в системе. Туда прописывается адрес DbgTrap, а старый адрес сохраняется в переменной KdpTrapOrStub. Поиск адреса переменной KiDebugRoutine осуществляется внутри экспортируемой функции KdDisableDebugger (в случае Windows XP) или же внутри неэкспортируемой KdDisableDebuggerWithLock (в случае Windows 2003, адрес KdDisableDebuggerWithLock можно найти внутри KdDisableDebugger).
KdDisableDebugger(WithLock) содержит следующий код:

{{{
; Windows XP SP1
and byte ptr [KdDebuggerEnabled], 0
mov dword ptr [KiDebugRoutine], offset KdpTrap
}}}
или
{{{
; Windows XP SP2
mov dword ptr [KiDebugRoutine], offset KdpTrap
mov byte ptr [KdDebuggerEnabled], 0
}}}
или
{{{
; Windows 2003 Server
mov dword ptr [KiDebugRoutine], offset KdpTrap
mov byte ptr [KdDebuggerEnabled], bl      ; bl = 0
}}}
DbgHookKiDebugRoutine ищет такой код и берет оттуда адрес KiDebugRoutine.

Также для работы с клавиатурой осуществляется внутренний документированный перехват ISR клавиатуры с помощью i/o control code'а драйвера i8042 - IOCTL_INTERNAL_I8042_HOOK_KEYBOARD. Он позволяет задать обработчик, который будет вызываться из ISR практически сразу после получения прерывания и это позволяет нам отреагировать на нажатие горячих клавиш, а так же следить за состояниями Num, Caps и Scroll lock в Windows.